#include<iostream>
#include<vector>
using namespace std;
class Solution{
    public:
    bool isSafe(vector<string> &board ,int row,int col,int n){
        for(int i=0;i<n;i++){
            if(board[i][col]=='Q'){
                return false;
            }
        }
        for(int i=0;i<n;i++){
            if(board[row][i]=='Q'){
                return false;
            }
        }
        for(int i=row,j=col;i>=0 && j>=col;i--,j--){
            if(board[i][j]=='Q'){
                return false;
            }
        }
        for(int i=row,j=col;i>=0 && j<n;i--,j++){
            if(board[i][j]=='Q'){
                return false;
            }
        }
        return false;
    }

    void NQueens(vector<string> &board ,int row, int n,vector<vector<string>> &ans){
        if(row==n){
            ans.push_back(board);
            return;
        }
        for(int i=0;i<n;i++){
            if(isSafe(board,row,i,n)){
                board[row][i]='Q';
                NQueens(board,row+1,n,ans);
                board[row][i]='.';
            }
        }
    }
    vector<vector<string>> SolveQueens(int num){
        vector<string> board(num,string(num,'.'));
        vector<vector<string>> ans;
        NQueens(board,0,num,ans);
    }
};
int main(){
    int num;
    cin>>num;
    Solution obj;
    vector<vector<string>> results = obj.SolveQueens(num);

    for(int i=0;i<results.size();i++){
        for(int j=0;j<results.size();j++){
            cout<<results[i][j]<<" ";
        }
        cout<<endl;
    }
    return 0;
}
